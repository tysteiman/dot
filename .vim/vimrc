" Sets {{{ -----------------------

set t_Co=256
set background=dark
set foldlevelstart=0
syntax on
set number
set magic
set hlsearch
set nocompatible
set foldmethod=marker
set ai
set history=700
set ruler
set cmdheight=1
set hid
set ignorecase
set smartcase
set incsearch
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set lbr
set tw=500
set wrap
set noswapfile
set laststatus=2
set autoread
filetype indent on

" }}}
" Snippets {{{ ---------------------------------------------------

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                                                    "
"                                               ***                                                  "
"                                                                                                    "
"                         The ultimate snippet system of perpetual laziness.                         "
"                                                                                                    "
"                                               ***                                                  "
"                                                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup snippets_javascript
    autocmd!
    autocmd FileType javascript nnoremap <buffer><localleader>f ifor<space>(var i = 0; i < lessthan; i++){<Enter>}<Esc>k0f<wvt;
    autocmd FileType javascript nnoremap <buffer><localleader>qq i$("");<esc>F"i
    autocmd FileType javascript nnoremap <buffer><localleader>qe i$();<esc>F)i
    autocmd FileType javascript nnoremap <buffer><localleader>dr i$(document).ready(function<space>()<space>{<enter><esc>A});<esc>O
augroup end

augroup snippets_vim
    autocmd!
    autocmd FileType vim nnoremap <buffer><localleader>f i"<space>{{{-------------------------------<enter><enter><enter><enter>"<space>}}}<esc>0xxkxkxkxk0f{i
    autocmd FileType vim nnoremap <buffer><localleader>ag iaugroup<enter>augroup<space>end<esc>kA<space>
augroup end

augroup snippets_ruby
    autocmd!
    autocmd FileType ruby iabbrev <buffer>iff if<Enter>end<Enter><Esc>kkA
    autocmd FileType ruby iabbrev <buffer>ife if<Enter>else<Enter>end<Enter><Esc>kkkA
    autocmd FileType ruby,eruby inoremap <buffer><c-b> {\|\|<space>}<esc>F\|i
    autocmd FileType ruby,eruby inoremap <buffer><c-e> .each<space>do<space>\|\|<enter>end<esc>k02f\|i
    autocmd FileType ruby,eruby inoremap <buffer><c-t> .times<space>do<space>\|\|<enter>end<esc>k02f\|i
augroup end

augroup snippets_erb
    autocmd!
    autocmd FileType eruby nnoremap <buffer><localleader>% i<%=%><esc>F=a<space>
    autocmd FileType eruby nnoremap <buffer><localleader>+ i<%%><esc>F%i<space>
augroup end

augroup snippets_php
    autocmd!
    autocmd FileType php nnoremap <buffer><localleader>f ifor($i = 0; $i < lessthan; $i++){<Enter>}<Esc>k0f<wviw
augroup end

augroup snippets_mixed
    autocmd!
    autocmd FileType php,cpp,javascript,c,java nnoremap<buffer><localleader>ii iif () {<Enter>}<Esc>bbf)i
    autocmd FileType php,cpp,javascript,c,java nnoremap <buffer><localleader>el iif () {<Enter>} else {<Enter>}<Esc>kk0f)i
    autocmd FileType php,cpp,javascript,c,java nnoremap <buffer><localleader>ee A<space>else {<Enter>}<Esc>O
augroup end

augroup snippets_commenter
    autocmd!
    " All these need to work with one single keybinding that evaluates the beginning of the line for comment
    autocmd FileType html,eruby vnoremap <buffer><localleader>cl <esc>`<O<!--<esc>`>o--><esc>
    autocmd FileType html,eruby vnoremap <buffer><localleader>cd <esc>`<kdd`>jdd
    autocmd FileType javascript,php,java,c,cpp nnoremap<buffer><localleader>cc I//<space><esc>j
    autocmd FileType python,ruby nnoremap<buffer><localleader>cc I#<space><esc>j
    autocmd FileType vim nnoremap<buffer><localleader>cc I"<space><esc>j
    autocmd FileType javascript,php,c,cpp,java vnoremap <buffer><localleader>cl :call CommentLines("c", 1)<cr>
    autocmd FileType ruby,python vnoremap <buffer><localleader>cl :call CommentLines("rb", 1)<cr>
    autocmd FileType ruby,python,javascript,php,c,cpp,java vnoremap <buffer><localleader>cd :call CommentLines("c", 0)<cr>
augroup end

" This is super janky and only works with languages I work with because I'm lazy
fun! CommentLines(ftype, commentOn) range
    let l:curline = a:firstline
    while l:curline <= a:lastline
        :call cursor(l:curline, 1)
        if a:commentOn
            if a:ftype == "c"
                :execute "normal! I//\<space>"
            else
                :execute "normal! I#\<space>"
            endif
        else
            :execute "normal! ^vwhx"
        endif
        let l:curline+=1
    endwhile
endfun

" }}}
" Mappings {{{ -------------------------------------------------------

" operators {{{-------------------------------

onoremap p i(
onoremap in :<c-u>normal! f(vi(<cr>
onoremap il :<c-u>normal! F)vi(<cr>
onoremap fn :<c-u>normal! 0f(hviw<CR>
onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>

" }}}
" insert {{{-------------------------------

inoremap jk <esc>

" }}}
" normal {{{-------------------------------

nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>B :Gblame<cr>
nnoremap <leader>vv :e $MYVIMRC<cr>
nnoremap <silent> <c-k> :wincmd k<CR>
nnoremap <silent> <c-j> :wincmd j<CR>
nnoremap <silent> <c-h> :wincmd h<CR>
nnoremap <silent> <c-l> :wincmd l<CR>
nnoremap <leader>l1 yyp0vg_r=o<Enter>
nnoremap <leader>l2 yyp0vg_r-o<Enter>
nnoremap <silent><leader>g :Gst<cr>
nnoremap <leader>+ 10<c-w>+
nnoremap <leader>> 10<c-w>>
nnoremap <leader>< 10<c-w><
nnoremap <leader>sv :source %<CR>:noh<cr>
nnoremap <leader>o O<esc>jo<esc>k
nnoremap <leader>sp mm[s1z=`m
nnoremap <leader>lb :execute "rightbelow vsplit " . bufname("#")<cr>
nnoremap <leader>; mmA;<esc>`m
nnoremap <leader>Q :call QuickFixToggle()<cr>
nnoremap <silent><leader>2 :NumbersToggle<CR>
nnoremap <silent><leader>a :spellr<CR>
nnoremap <silent><leader>b :TagbarToggle<CR>
nnoremap <silent><leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
nnoremap <silent><leader>t :tselect<CR>
nnoremap <leader>w :StripWhitespace<CR>
nnoremap <silent><C-n> :NERDTreeToggle<CR>

let g:quickfix_is_open = 0
function! QuickFixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction

" }}}
" visual {{{-------------------------------

vnoremap <leader>: <esc>`<i"<esc>`>la"<esc>
vnoremap <leader>; <esc>`<i'<esc>`>la'<esc>

" }}}

" }}}
" Abbreviations {{{ ----------

iabbrev teh the
iabbrev iot in order to
iabbrev doc documentation

" }}}
" Status Line {{{ -----------------

set statusline=%r
set statusline+=%t
set statusline+=\ ->\ %y
set statusline+=%m
set statusline+=\ \ Buffer:[%n]
set statusline+=%=
set statusline+=Line:[
set statusline+=%l
set statusline+=/
set statusline+=%L
set statusline+=]
set statusline+=\ \ Col:[%c]

" }}}

execute pathogen#infect()
color hybrid

