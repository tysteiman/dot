#+TITLE: Emacs Configuration

* Set Custom File

#+begin_src elisp

  (setq custom-file (concat user-emacs-directory "custom.el"))

#+end_src

* Startup Performance

Turn down the garbage collection to let us start up faster.

#+begin_src elisp

  (setq gc-cons-threshold (* 60 1000 1000))

#+end_src

* Main Configuration Funcalls

#+begin_src elisp

  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (column-number-mode t)
  (scroll-bar-mode 0)
  (show-paren-mode)
  (display-time-mode)
  (auto-revert-mode t)
  (column-number-mode t)

#+end_src

* Set Variables

#+begin_src elisp

  (setq make-backup-files nil)
  (setq ns-pop-up-frames nil)
  (setq vc-follow-symlinks t)
  (setq tags-revert-without-query t)
  (setq ruby-insert-encoding-magic-comment nil)
  (setq inhibit-startup-message t)
  (setq dired-listing-switches "-lah")
  (setq initial-scratch-message ";; scratch buffer\n\n")
  (setq create-lockfiles nil)

  (setq-default truncate-lines t)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)
  (setq-default js-indent-level 4)
  (setq-default sgml-basic-offset 4)

#+end_src

* GUI Face Attributes

#+begin_src elisp

  (when (display-graphic-p)
    (set-face-attribute 'default nil :height 130))

#+end_src

* Defuns
** Emacs line movement (next line/previous line)

#+begin_src elisp

  (defun my/trim-current-line-region ()
    "Trim whitespace for the given line"
    (let ((end (point))
          (beg (save-excursion
                 (move-beginning-of-line 1)
                 (point))))
      (whitespace-cleanup-region beg end)))

  (defun my/new-next-line ()
    "Create a new line under the current one"
    (interactive)
    (move-end-of-line 1)
    (my/trim-current-line-region)
    (newline)
    (indent-for-tab-command))

  (defun my/new-previous-line ()
    "Create a new line above the current one"
    (interactive)
    (my/trim-current-line-region)
    (move-beginning-of-line 1)
    (newline)
    (previous-line)
    (indent-for-tab-command))

#+end_src

** Projects Ctags

Use projectile to generate ctags in known project structures like rails, create-react-app, etc...

*** Main Functionality/defun

#+begin_src elisp

  (defun my/project-tags (dir &optional excludes)
    "Generate etags for the current project (if in one). This will only generate tags for the app (rails) directory."
    (interactive "sCode dir to generate tags for: ")
    (let* ((project (projectile-project-root))
           (target-dir (concat project dir))
           (tags-file (concat project "TAGS")))
      (if project
          (if (file-exists-p target-dir)
              ;; are never that big...
              (progn
                ;; it may be possible that this command is not finished by the time we reun visit-tags-table....
                ;; if we ever notice that we could probably just switch this to being a sync exec since our files
                (async-shell-command (concat "ctags " (or excludes "") " -eR -f " tags-file " " target-dir))
                ;; TODO: might not need to do this -- i was generating the tags in the wrong dir previously
                (visit-tags-table tags-file))
            (message "Directory [%s] does not exist." dir))
        (message "Not in a project."))))

#+end_src

*** Languages/Frameworks

#+begin_src elisp

  (defun my/rails-tags ()
    "Generate etags for rails projects (src)"
    (interactive)
    (my/project-tags "app" "--exclude=*css --exclude=*scss --exclude=*.erb"))

  (defun my/react-tags ()
    "Generate ctags for React (create-react-app) projects"
    (interactive)
    (my/project-tags "src"))

#+end_src

** Send text to Bash

Misc defuns for sending lines/regions, etc of text to bash commands.

This comes in handy when looking at something like a bashrc or xinitrc file, etc and want to run those commands directly from Emacs

#+begin_src elisp

  (defun my/send-region-to-shell (&optional start end)
    "Simple function to send the contents of a region to a shell command -- useful for debugging configs."
    (interactive)
    (let ((region-text (if (and start end)
                           (buffer-substring start end)
                         (buffer-substring (region-beginning) (region-end)))))
      (shell-command region-text)))

  (defun my/send-line-to-shell ()
    "Function to use my/send-region-to-shell, giving it the whole line to run"
    (interactive)
    (my/send-region-to-shell (line-beginning-position) (line-end-position)))

#+end_src

** Misc defuns

#+begin_src elisp

  (defun my/load-config-file (file)
    "Load configuration .el file"
    (let ((full-path (concat user-emacs-directory file ".el")))
      (if (file-exists-p full-path)
          (load-file full-path)
        (message "File [%s] does not exist." full-path))))

  (defun my/configure-prog-mode ()
    (interactive)
    (setq show-trailing-whitespace t)
    (display-line-numbers-mode 1)
    (diff-hl-margin-mode 1)
    (diff-hl-mode 1)
    (when (display-graphic-p)
      (hl-line-mode 1)))

  (defun my/quit-emacs (yn)
    "Prompt the user if they're sure before closing Emacs."
    (interactive "cAre you sure you want to close Emacs? y/n ): ")
    (when (char-equal yn ?y)
      ;; (start-process-shell-command "xrandr" nil "xrandr --output eDP-1 --mode 1920x1080 --brightness .8")
      (save-buffers-kill-terminal)))

#+end_src

* Install Packages
** Package Setup
*** Add MELPA archive

#+begin_src elisp

  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

*** Install use-package

The only package we install directly from MELPA ourselves is use-package

#+begin_src elisp

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)

#+end_src

** Install packages
*** Languages & Coding
**** Language Modes

#+begin_src elisp

  (use-package dockerfile-mode
    :defer t)

  (use-package yaml-mode
    :hook (yaml-mode . my/configure-prog-mode))

  (use-package js2-mode
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.js"  . js2-mode)))

  (use-package rjsx-mode
    :defer t
    :init
    (setq js2-mode-show-parse-errors nil)
    (setq js2-mode-show-strict-warnings nil)
    :config
    (add-to-list 'auto-mode-alist '("\\.json"  . js-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx" . rjsx-mode))
    (define-key rjsx-mode-map (kbd "C-j") 'emmet-expand-line)
    (define-key rjsx-mode-map (kbd "M-.") 'xref-find-definitions)
    (define-key js2-mode-map (kbd "M-.") 'xref-find-definitions))

  (use-package typescript-mode
    :defer t)

  (use-package php-mode
    :defer t)

  (use-package web-mode
    :after emmet-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.erb" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php" . web-mode))
    (define-key web-mode-map (kbd "C-j") 'emmet-expand-line))

  (use-package markdown-mode
    :defer t)

  (use-package vimrc-mode
    :defer t)

  (use-package slim-mode
    :defer t)

  (use-package lua-mode
    :defer t)

#+end_src

**** Auto-Completion
***** LSP

lsp-mode will enable symbols, completion, syntax checking, etc. 

|------+--------------|
| Mode | LSP Engine   |
|------+--------------|
| Ruby | Solargraph   |
| JS   | ts-ls        |
| PHP  | Intelephense |
| CSS  | css-ls       |
|------+--------------|

#+begin_src elisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-headerline-breadcrumb-enable nil)
    :config
    (lsp-enable-which-key-integration t)
    :hook
    (js2-mode  . lsp-deferred)
    (rjsx-mode . lsp-deferred)
    (php-mode  . lsp-deferred)
    (scss-mode . lsp-deferred))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

#+end_src

***** Company

#+begin_src elisp

  (use-package company
    :init
    (setq company-dabbrev-downcase nil)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.5)
    :hook (prog-mode . company-mode))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

***** Misc (Emmet, etc.)

#+begin_src elisp

  (use-package emmet-mode
    :defer t)

#+end_src

**** PrettierJS

#+begin_src elisp

  (use-package prettier
    :after (:any js2-mode rjsx-mode)
    :hook
    (js2-mode  . my/configure-prettier)
    (rjsx-mode . my/configure-prettier))

#+end_src

When we enter a JS file we want to turn on prettier, but only if there is a .prettierrc.json file at the projectile project root.

#+begin_src elisp

  (defun my/configure-prettier ()
    "Configure Prettier by turning it on only if there is a pretterrc file in the projectile root"
    (let ((prettier-rc (concat (projectile-project-root) ".prettierrc.json")))
      (if (file-exists-p prettier-rc)
          (prettier-mode 1)
        (message ".prettierrc.json not detected in project root -- skipped loading."))))

#+end_src

**** Tree Sitter

#+begin_src elisp

  (use-package tree-sitter
    :hook
    (prog-mode . tree-sitter-hl-mode))

  (use-package tree-sitter-langs :defer t)

#+end_src

*** Theme

#+begin_src elisp

  (use-package doom-themes
    :config (load-theme 'doom-one t))

#+end_src

*** UI

#+begin_src elisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package doom-modeline
    :init
    (setq doom-modeline-height 50)
    (setq doom-modeline-vcs-max-length 25)
    (setq doom-modeline-buffer-file-name-style "file-name")
    :config (doom-modeline-mode 1))

  (use-package swiper
    :bind (("C-M-s" . swiper)))

  (use-package window-numbering
    :config (window-numbering-mode 1))

  (use-package hide-mode-line
    :bind (("C-c t m" . hide-mode-line-mode)))

  (use-package which-key
    :config
    (which-key-mode)
    :diminish which-key-mode
    :init
    (setq which-key-idle-delay 1))

  (use-package diredfl
    :hook (dired-mode . diredfl-mode))

  (use-package tab-bar
    :defer
    :init
    (setq tab-bar-show 1)
    (setq tab-bar-close-button-show nil)
    :custom-face
    (tab-bar-tab ((t (:inherit 'doom-modeline-panel :background nil :foreground nil))))
    (tab-bar-tab-inactive ((t (:inherit 'doom-modeline-highlight :background nil :foreground nil)))))

#+end_src

*** Dashboard

#+begin_src elisp

  (use-package dashboard
    :init
    ;; (setq dashboard-startup-banner 'logo)
    (setq dashboard-startup-banner (concat user-emacs-directory (if (display-graphic-p) "banner.png" "banner.txt")))
    (setq dashboard-set-heading-icons t)

    (setq initial-buffer-choice (lambda ()
                                  (get-buffer "*dashboard*")))

    (setq dashboard-items '((recents . 20)
                            (projects . 20)))

    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((projects . "repo")
                                      (recents  . "squirrel")))
    (global-set-key (kbd "C-c f d") (lambda ()
                                      (interactive)
                                      (switch-to-buffer "*dashboard*"))))

#+end_src

*** Evil

#+begin_src elisp

  (use-package evil
    :hook
    (prog-mode        . turn-on-evil-mode)
    (org-mode         . turn-on-evil-mode)
    (conf-mode        . turn-on-evil-mode)
    (yaml-mode        . turn-on-evil-mode)
    (git-commit-setup . turn-on-evil-mode))

  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (evil-org-set-key-theme '(navigation insert textobjects additional claendar)))

  (use-package evil-escape
    :after evil
    :init (setq-default evil-escape-key-sequence "jk")
    :config (evil-escape-mode))

#+end_src

*** Org Mode

#+begin_src elisp

  (use-package org
    :init
    (setq org-startup-folded t)
    :config
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src elisp"))
    :hook (org-mode . org-indent-mode))

  (use-package visual-fill-column
    :hook (org-mode . my/org-mode-visual-fill))

  (defun my/org-mode-visual-fill ()
    (setq visual-fill-column-width 150)
    (setq visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config (with-eval-after-load 'org-superstar
              (set-face-attribute 'org-superstar-item nil :height 1.2)
              (set-face-attribute 'org-superstar-header-bullet nil :height 1.3)
              (set-face-attribute 'org-superstar-leading nil :height 1.5)))

#+end_src

*** Magit & Git

#+begin_src elisp

  (use-package magit
    :commands magit-status
    :bind (("C-c m s" . magit-status)
           ("C-M-i"   . magit-status)
           ("C-c m b" . magit-blame)))

  (use-package diff-hl
    :after magit
    :hook
    (magit-post-refresh . diff-hl-magit-post-refresh))

#+end_src

*** Misc Emacs Packages

#+begin_src elisp

  (use-package projectile
    :config
    (projectile-mode 1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

  (use-package sudo-edit
    :defer t)

  (use-package rg
    :commands (projectile-ripgrep))

  (use-package ibuffer
    :bind (("C-x C-b" . ibuffer))
    :config
    (define-key ibuffer-mode-map (kbd "C-x C-b") 'previous-buffer)
    (define-key ibuffer-mode-map (kbd "q")       'kill-buffer-and-window))

  (use-package vterm
    :bind (("C-c e v" . vterm)))

  (use-package pulseaudio-control
    :config (pulseaudio-control-default-keybindings))

  (use-package dictionary
    :defer t)

#+end_src

*** GUI Icons (all-the-icons)

#+begin_src elisp

  (when (display-graphic-p)
    (use-package all-the-icons)

    (use-package all-the-icons-dired
      :after all-the-icons
      :init
      (setq all-the-icons-dired-monochrome nil)
      :hook
      (dired-mode . all-the-icons-dired-mode))

    (use-package all-the-icons-ibuffer
      :after all-the-icons
      :hook
      (ibuffer-mode . all-the-icons-ibuffer-mode)))

#+end_src

*** Ivy

#+begin_src elisp

  (use-package ivy
    ;; :init (setq ivy-height 10)
    :config (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :after ivy-rich
    :bind (("M-x"   . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)))

  (when (display-graphic-p)
    (use-package ivy-posframe
      :after ivy
      :init
      (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
      (setq ivy-posframe-height-alist '((swiper . 20)))
      (setq ivy-posframe-width 170)
      (setq ivy-posframe-parameters '((left-fringe . 20)
                                      (right-fringe . 20)))
      :config (ivy-posframe-mode 1)))

#+end_src

* Key Bindings
** My Defuns

#+begin_src elisp

  (global-set-key (kbd "C-c t r") 'my/rails-tags)
  (global-set-key (kbd "C-c t e") 'my/rails-tags)
  (global-set-key (kbd "C-x C-c") 'my/quit-emacs)
  (global-set-key (kbd "C-o")     'my/new-next-line)
  (global-set-key (kbd "C-M-o")   'my/new-previous-line)
  (global-set-key (kbd "C-c s r") 'my/send-region-to-shell)
  (global-set-key (kbd "C-c s l") 'my/send-line-to-shell)

#+end_src

** Other Keybindings

#+begin_src elisp

  (global-set-key (kbd "C-c f o") (lambda ()
                                    (interactive)
                                    (find-file (concat user-emacs-directory "init.org"))))

  (global-set-key (kbd "C-c f i") 'imenu)
  (global-set-key (kbd "C-c e s") 'eshell)
  (global-set-key (kbd "M-z")     'zap-up-to-char)
  (global-set-key (kbd "C-M-\\")  'split-window-right)
  (global-set-key (kbd "C-M--")   'split-window-below)
  (global-set-key (kbd "C-M-0")   'delete-window)
  (global-set-key (kbd "C-M-1")   'delete-other-windows)
  (global-set-key (kbd "C-M-=")   'balance-windows)
  (global-set-key (kbd "C-c i i") 'package-install)
  (global-set-key (kbd "C-c i l") 'list-packages)
  (global-set-key (kbd "C-c t l") 'display-line-numbers-mode)
  (global-set-key (kbd "C-c b r") 'rename-buffer)

  (global-set-key (kbd "C-c b v") (lambda ()
                                    (interactive)
                                    (revert-buffer nil t)
                                    (message "Buffer reverted.")))

#+end_src

* Hooks

#+begin_src elisp

  (add-hook 'prog-mode-hook 'my/configure-prog-mode)

  (add-hook 'org-mode-hook (lambda ()
                             (toggle-truncate-lines)))

#+end_src

* Puts

#+begin_src elisp

  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'erase-buffer 'disabled nil)

#+end_src
* Runtime Performance

Above we set the gc-cons-threshold higher to get faster startup, we set it back to what it was before here

#+begin_src elisp

  (setq gc-cons-threshold 800000)

#+end_src
